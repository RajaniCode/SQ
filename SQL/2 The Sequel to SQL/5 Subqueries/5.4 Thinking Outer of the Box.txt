5.4 Thinking Outer of the Box


Only one challenge left, and it’s a doozy. It’d really help if we knew if any movies were playing in the rooms returned by our previous query.

schema.sql
CREATE TABLE Movies (
  id int PRIMARY KEY,
  title varchar(50) NOT NULL
);

INSERT INTO Movies (id, title) VALUES
  (1, 'Don Juan'),
  (2, 'The Lost World'),
  (3, 'Peter Pan'),
  (4, 'Robin Hood');

CREATE TABLE Rooms (
  id INT PRIMARY KEY,
  seats int,
  movie_id int,
  FOREIGN KEY (movie_id) REFERENCES Movies
);

INSERT INTO Rooms (id, seats, movie_id) VALUES
  (1, 50, 2),
  (2, 100, 1),
  (3, 100, NULL),
  (4, 150, 3);


subquery.sql
SELECT id
FROM Rooms
WHERE seats > (SELECT AVG(seats) FROM Rooms);


1. Add a join to the query so we can find movies playing in our rooms. Remember, not all rooms will have movies. Also, we may need to prefix the id column with the correct table name.

Answer:
SELECT r.id
FROM Rooms r
LEFT OUTER JOIN Movies m
ON r.movie_id = m.id
WHERE seats > (SELECT AVG(seats) FROM Rooms);


2. Let's also return the movie title in the result.

Answer:
SELECT r.id, m.title
FROM Rooms r
LEFT OUTER JOIN Movies m
ON r.movie_id = m.id
WHERE seats > (SELECT AVG(seats) FROM Rooms);


3. Lastly, create table aliases for both Rooms and Movies.

Answer:
SELECT r.id, m.title
FROM Rooms r
LEFT OUTER JOIN Movies m
ON r.movie_id = m.id
WHERE seats > (SELECT AVG(seats) FROM Rooms);