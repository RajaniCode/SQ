3.9 Creating a Relationship


Our movie theatre has 5 rooms to show movies, and can only show 1 movie at a time. Given the Movies table defined schema.sql, modify our Rooms table to create a one-to-one relationship with Movies.


Tables
Movies
id 	title
1 	Don Juan
2 	The Lost World
3 	Peter Pan
4 	Robin Hood
5 	The Wolfman


schema.sql
CREATE TABLE Movies (
  id int PRIMARY KEY,
  title varchar(50)
);

INSERT INTO Movies (title) VALUES
  ('Don Juan'),
  ('The Lost World'),
  ('Peter Pan'),
  ('Robin Hood'),
  ('Wolfman');


rooms.sql
CREATE TABLE Rooms (
  id int PRIMARY KEY,
  seats int,
  
);


1. First, add the SQL to create the relationship. Add a movie_id column with the int type.

Answer:
rooms.sql
CREATE TABLE Rooms (
  id int PRIMARY KEY,
  seats int,
  movie_id int
);


2. Next, add the proper FOREIGN KEY constraint using the table constraint syntax, so we don't end up with orphaned records.

Answer:
rooms.sql
CREATE TABLE Rooms (
  id int PRIMARY KEY,
  seats int,
  movie_id int,
  FOREIGN KEY (movie_id) REFERENCES movies(id)
);


3. Lastly, in our theatre 1 movie can play in one room at a time. Let's add a constraint that will ensure that no movies are ever marked to play in the same room at the same time.

Answer:
rooms.sql
CREATE TABLE Rooms (
  id int PRIMARY KEY,
  seats int,
  movie_id int UNIQUE,
  FOREIGN KEY (movie_id) REFERENCES movies(id)
);
